package LinkedList;

class Node{
    int data ;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }

    
}

public class deletion {
    public static void main(String[] args) {
        int [] arr = {1,2,3,4,5};
        Node head = ArrtoLL(arr);
        //head = delhead(head);
        //head = deltail(head);
        //head = delatpos(head, 2);
        head = delatval(head, 4);
        print(head);

    }
    static Node ArrtoLL(int[] arr){
        Node head = new Node(arr[0]);
        Node current = head ;
        for (int i = 1; i < arr.length; i++) {
            Node temp = new Node(arr[i]);
            current.next = temp ;
            current = temp ;
            
        }
        return head ;
    }
    static void print(Node head){
        Node temp = head;
        while(temp != null){
            System.out.print(temp.data+ " ---> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
    static Node delhead(Node head){
        head = head.next;
        return head;
    }
    static Node deltail(Node head){
        Node temp = head;
        while(temp.next.next != null){
            temp = temp.next;
        }
        temp.next = null;
        return head;
    }
    static Node delatpos(Node head, int pos){
        if(pos == 1){
            return head.next;
        }
        int count = 0;
        Node prev = null;
        Node temp = head;
        while(temp != null){
            count++;
            if(count == pos){
                prev.next = prev.next.next;
                break; 
            }
            prev = temp;
            temp = temp.next;
        }
        return head;
    }
    static Node delatval(Node head, int value){
        if(value == head.data){
            return head.next;
        }
        
        Node prev = null;
        Node temp = head;
        while(temp != null){
            
            if(temp.data == value){
                prev.next = prev.next.next;
                break; 
            }
            prev = temp;
            temp = temp.next;
        }
        return head;
    }
    
}
